name: Ivy Dashboard Comment Logging
on:
  discussion_comment:
    types: [created]

jobs:
  ongoing_discussion:
    name: Log New Comment to Dashboard
    if: ${{ github.event.discussion.category.name == 'Ongoing' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checks
        uses: actions/checkout@v2
        with:
          path: ivy
          persist-credentials: false
      - name: Generate Token
        id: generate_token
        uses: tibdex/github-app-token@36464acb844fc53b9b8b2401da68844f6b05ebb0
        with:
          app_id: ${{ secrets.PR_APP_ID }}
          private_key: ${{ secrets.PR_APP_PEM }}
      - name: Get Project Data
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          ORGANIZATION: unifyai
          PROJECT_NUMBER: 4
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectNext(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      id
                      name
                      settings
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV
          echo 'COMMENT_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== "Commented On") | .id' project_data.json) >> $GITHUB_ENV
          echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Add Comment to project
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          COMMENT_ID: ${{ github.event.comment.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $comment:ID!) {
              addProjectNextItem(input: {projectId: $project, contentId: $comment}) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f comment=$COMMENT_ID --jq '.data.addProjectNextItem.projectNextItem.id')"

          echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Set fields
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $comment_field: ID!
              $date_value: String!
            ) {
              set_commented_on: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $comment_field
                value: $date_value
              }) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f comment_field=$COMMENT_FIELD_ID -f date_value=$DATE --silent
